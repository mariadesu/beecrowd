#include <bits/stdc++.h>
using namespace std;

vector<bool> vcrivo(10000001, true);
vector<long long> primos;

void crivo(){
    vcrivo[0] = false;
    vcrivo[1] = false;

    for(int i = 2; i<sqrt(vcrivo.size()); i++){
        if(vcrivo[i]==true){
            for(int j = i*i; j<vcrivo.size(); j += i){
                if(vcrivo[j] == true){
                    vcrivo[j] = false;
                }
            }
        }
    }
    
    //captura primos
    for (int i = 2; i < vcrivo.size(); i++) {
        if (vcrivo[i] == true) {
            primos.push_back(i);
        }
    }
}

long long MDCE (long long a, long long b, long long &x, long long &y) {
	if (b == 0) {
		x = 1; y = 0;
		return a;
	} else {
		long long xlin, ylin;
		long long d = MDCE(b, a % b, xlin, ylin);
		x = ylin;  y = xlin - (a/b) * ylin;
		return d;
	}
}

long long InvMod (long long b, long long n) {
	long long x, y;
	long long d = MDCE(b, n, x, y);
	return (x+n) % n;
}

long long multMod(long long a, long long b, long long n){
    return (a*b)%n;
}

int exp(long long base, long long d, long long n){
    if(d==0){
        return 1;
    }
    else if (d%2==1){
        return (exp(base, d-1, n)*base)%n;
    }
    else{
        long long x = exp(base, d/2, n);
        return (x*x)%n;
    }
}

int divisao(string m, long long d, long long n){
    long long base = m.at(0) - '0';
    
    for(int i = 1; i < m.size(); i++){
        base = base * 10 + (m.at(i)-'0');
        base = base % n;
    }
    
    int resposta = exp(base, d, n);
    
    return resposta;
}

void encontrar_fatores(long long n, long long &p, long long &q){
    for(int i = 0; i<primos.size();i++){
        if(primos[i]*primos[i]<n){
            if (n % primos[i] == 0) {
                p = primos[i];
                q = n / primos[i];
                return;
            }
        }
        else break;
        
    }
}

void rsa(){
    long long e, n;
    cin >> e >> n;
    string mensagem_criptografada;
    cin >> mensagem_criptografada;
    
    //fatorar n
    long long p, q;
    encontrar_fatores(n, p, q);
    
    long long d = InvMod(e, (p-1)*(q-1));
    
    cout << divisao(mensagem_criptografada, d, n) << endl;
    
}

int main() {
	int t;
	cin >> t;
	
	crivo();
	
	while (t--) {
		rsa();
	}

	return 0;
}
